@using MasterReservation.Models
@model object[]

@{
    ViewBag.Title = "Страница рабочего места";
}


@Styles.Render("~/Content/datepicker.css")
@Styles.Render("~/Content/slick/slick.css")
@Styles.Render("~/Content/slick/slick-theme.css")
@Styles.Render("~/Content/WorkingPlacePageStyles.css")


<script src="https://api-maps.yandex.ru/2.1/?apikey=8db9bf80-135a-40b0-9e06-66adc66fd9b3&lang=ru_RU"
        type="text/javascript"></script>
@Scripts.Render("~/Scripts/jquery-ui-1.12.1.min.js")
@Scripts.Render("~/Scripts/datepicker.js")
@Scripts.Render("~/Scripts/slick.min.js")
@Scripts.Render("~/Scripts/WorkingPlacePageScripts.js")


<div id="body-container">
    <div id="left-bar">
        <div id="slider-photo">
            <div class="img-wrap">
                <img src="~/Resources/img/default-card-img.png" alt="">
            </div>
            <div class="img-wrap">
                <img src="~/Resources/img/default-card-img.png" alt="">
            </div>
            <div class="img-wrap">
                <img src="~/Resources/img/default-card-img.png" alt="">
            </div>
            <div class="img-wrap">
                <img src="~/Resources/img/default-card-img.png" alt="">
            </div>
            <div class="img-wrap">
                <img src="~/Resources/img/default-card-img.png" alt="">
            </div>
        </div>
        <div id="main-description">
            <span id="destription-title">
                @((Model[0] as WorkingPlaceModel).Description)
            </span>
            <ul id="description-body">
                <span class="desc-title">Подходящие услуги</span>
                @{ var list = (Model[0] as WorkingPlaceModel).Offers.Split(','); }
                @for (int i = 0; i < list.Length - 1; i++)
                {
                    <li class="description-line">@list[i]</li>
                }
                <span class="desc-title">Дополнительные условия</span>
                @{
                    var ac = (Model[0] as WorkingPlaceModel).AdditionalConditions;
                    if (ac != null)
                    {
                        list = ac.Split(',');
                        for (int i = 0; i < list.Length - 1; i++)
                        {
                            <li class="description-line">@list[i]</li>
                        }
                    }
                }

            </ul>
        </div>
    </div>
    <div id="right-bar">
        <div class="card-description">
            @if (ViewBag.ErrorMessage != null)
            {
                <span class="error-message">@ViewBag.ErrorMessage</span>
            }
            @if (ViewBag.InfoMessage != null)
            {
                <span class="info-message">@ViewBag.InfoMessage</span>
            }

                <div class="card-title">
                    <span class="card-title-text">@((Model[1] as SalonModel).SalonTitle)</span>
                    @if (ViewBag.Favorites)
                    {
                        <svg version="1.1" class="heart red-heart" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             width="17px" height="15px" viewBox="0 0 510 510" style="enable-background: new 0 0 510 510;" xml:space="preserve">
                        <g id="favorite">
                        <path d="M255,489.6l-35.7-35.7C86.7,336.6,0,257.55,0,160.65C0,81.6,61.2,20.4,140.25,20.4c43.35,0,86.7,20.4,114.75,53.55
								C283.05,40.8,326.4,20.4,369.75,20.4C448.8,20.4,510,81.6,510,160.65c0,96.9-86.7,175.95-219.3,293.25L255,489.6z" />

                        </g>
                    </svg>
                    }
                    else
                    {
                        <svg version="1.1" class="heart" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                             width="17px" height="15px" viewBox="0 0 510 510" style="enable-background: new 0 0 510 510;" xml:space="preserve">
                        <g id="favorite">
                        <path d="M255,489.6l-35.7-35.7C86.7,336.6,0,257.55,0,160.65C0,81.6,61.2,20.4,140.25,20.4c43.35,0,86.7,20.4,114.75,53.55
								C283.05,40.8,326.4,20.4,369.75,20.4C448.8,20.4,510,81.6,510,160.65c0,96.9-86.7,175.95-219.3,293.25L255,489.6z" />

                        </g>
                    </svg>
                    }
                    <button id="show-map-btn" class="blue-button">
                        Показать на карте
                        <div id="map"></div>
                    </button>

                </div>
            <span class="address">@((Model[1] as SalonModel).Adress)</span>
            <span class="tariffs-title">Тарифы на аренду рабочего места</span>
            <div class="tariffs-wrap">
                <div class="tariff-line bold-line">
                    <div class="tariff">От 1 часа</div>
                    <div class="tariff">От 3х часов</div>
                    <div class="tariff">От 12 часов</div>
                </div>
                <div class="tariff-line">
                    <div class="tariff" id="rate1h">@((Model[0] as WorkingPlaceModel).Rate1h) р</div>
                    <div class="tariff" id="rate3h">@((Model[0] as WorkingPlaceModel).Rate3h) р</div>
                    <div class="tariff" id="rateday">@((Model[0] as WorkingPlaceModel).RateDay) р</div>
                </div>
            </div>
        </div>
        @using (Html.BeginForm("Booking", "BookingSlots", FormMethod.Post))
        {
            @Html.HiddenFor(model=>(Model[3] as BookingModel).PlaceId);
            @Html.HiddenFor(model=>(Model[3] as BookingModel).SalonId);
            @Html.HiddenFor(model=>(Model[3] as BookingModel).ResidentId);
            <div id="record-day">
                <span>Доступное время записи на:</span>
                <div id="input-date-wrap">
                    <img src="~/Resources/svg/left-arrow.svg" id="prev-day">
                    <span id="input-date"></span>
                    @*<input type="text" class="hidden-input" id="chosen-date">*@
                    @Html.EditorFor(model => (Model[3] as BookingModel).Date, new { htmlAttributes = new { @class = "hidden-input", id = "chosen-date" } })
                    <img src="~/Resources/svg/right-arrow.svg" id="next-day">
                </div>
                <button type="button" class="blue-button" id="calendar-btn">
                    Календарь
                    <div id="calendar-wrap"></div>
                </button>

            </div>
            <div id="input-time-wrap">
                @*@foreach (var slot in (Model[2] as List<TimeSlotModel>))
                {
                    if (slot.Booked)
                    {
                        <button type="button" class="button-time">@slot.Time</button>
                    }
                    else
                    {
                        <button type="button" class="button-time white-button">@slot.Time</button>
                    }
                }*@

            </div>
            @*<input type="text" class="hidden-input" id="input-times">*@
            @Html.EditorFor(model => (Model[3] as BookingModel).Times, new { htmlAttributes = new { @class = "hidden-input", id = "input-times" } })
            <div id="checkbox-wrap">
                <input type="checkbox" id="full-day-checkbox">
                <span id="checkbox-label">Забронировать весь рабочий день</span>
            </div>
            <textarea id="textarea" placeholder="Дополнительные требования"></textarea>
            <div id="total-time">
                <span class="total-label">Вы записываетесь на:</span>
                <span id="total-bold"></span>
            </div>
            <div id="total-money">
                <span class="total-label">Итого к оплате:</span>
                <span id="total-sum"></span>
            </div>
            <button class="blue-button disabled-btn" id="booked-btn" disabled>Забронировать</button>
        }

    </div>
</div>

<div id="time-slots" style="display: none;">
    @{
        List<DateTime> dates = new List<DateTime>();
        foreach (var model in (Model[2] as List<TimeSlotModel>))
        {
            if (!dates.Contains(model.Date))
            {
                dates.Add(model.Date);
            }
        }
        foreach (var date in dates)
        {
            <div id="@date.ToShortDateString().Replace('.','-')">
                @foreach (var model in (Model[2] as List<TimeSlotModel>)){
                    if (model.Date == date)
                    {
                        if (model.Booked)
                        {
                            if (model.ResidentId == (Model[3] as BookingModel).ResidentId)
                            {
                                <div>*@(model.Time)</div>
                            }
                            else
                            {
                                <div>+@(model.Time)</div>
                            }
                            
                        }
                        else
                        {
                            <div>-@(model.Time)</div>
                        }
                    }
                }
            </div>
        }
    }

</div>